#!/usr/bin/env node
var fs = require('fs');
var optimist = require('optimist');

var optionsParser = optimist
  .usage('\nLaika - testing framework for meteor.\nUsage: $0 [options] [path filter]')

  .describe('mport', 'specify mongodb port')
  .default('mport', 27017)
  .alias('mport', 'm')

  .describe('ui', 'specify test user interfaces (tdd|bdd)')
  .default('ui', 'tdd')
  .alias('ui', 'u')

  .describe('reporter', 'specify reporter to use (support all mocha reporters)')
  .default('reporter', 'spec')
  .alias('reporter', 'R')

  .describe('timeout', 'test-case timeout in milliseconds')
  .default('timeout', 2000)
  .alias('timeout', 't')

  .describe('compilers', '<ext>:<module>,...  use the given module(s) to compile files')
  .alias('compilers','c')

  .describe('version', 'print version')
  .alias('version', 'v')

  .describe('debug', 'print logs from client/server')
  .default('debug', false)
  .alias('debug', 'd')

  .describe('deep-debug', 'print more debug logs')
  .default('deep-debug', false)
  .alias('deep-debug', 'D')

  .describe('help', 'show this help')
  .alias('help', 'h');

setDefaultsFromOptsFile(optionsParser, 'laika.opts');

var argv = optionsParser.argv;

laika = require('./_laika');

if(argv.help) {
  optimist.showHelp();
} else if(argv.v) {
  laika.version();
} else {
  laika.run(argv);
}

function setDefaultsFromOptsFile(optionsParser, filePath) {
  var optsFileArgs = parseOptsFile(filePath);
  var fileOpts = optimist.parse(optsFileArgs);
  return optionsParser.default(fileOpts);
}

function parseOptsFile(filePath) {
  var opts = [];
  if (fs.existsSync(filePath)) {
    var fileValues = fs.readFileSync(filePath, 'utf8')
      .trim()
      .split(/[\s=]+/);
    opts = opts.concat(fileValues);
  }
  return opts;
}
