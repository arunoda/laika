#!/usr/bin/env node

var Phantom = require('node-phantom');
var colors = require('colors');
var Injector = require('../lib/injector');
var App = require('../lib/app');
var AppPool = require('../lib/app_pool');
var testLogic = require('../lib/test_logic');
var helpers = require('../lib/helpers');
var logger = require('../lib/logger');
var qbox = require('qbox');
var glob = require('glob');
var Mocha = require('mocha');
var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;

var injector = new Injector();
var deps = qbox.create(2);
var phantom;
var appPool;
var ended = false;

module.exports = {
  run: function(argv) {
    if(argv.debug) {
      logger.log('\n  NOTICE: '.yellow + 'if you are looking for debug logs(-d or -D), use -V instead'.bold);
    }

    if(argv.verbose) {
      //adding addition support for the --verbose
      argv.reporter = 'tap';
      logger.setVerbose(true);
      logger.setDeepVerbose(true);
    }

    var compilers = parseCompilers(argv.compilers);
    var isSourceFileAllowed = generateIsSourceFileAllowed(compilers);

    helpers.makeAssertFiberFriendly();
    helpers.exportFibers();

    //laika drops dbs after the test without any problem
    //if if you close laika with "CTRL + C" or laika got some internal error
    //ther is possibility of having some leaked dbs
    //this will ensure dropping them
    dropLaikaDbs(checkMongoDB);

    function checkMongoDB() {
      var mongoUrl = "mongodb://localhost:" + argv.mport;
      helpers.checkForMongoDB(mongoUrl, function(connected, err) {
        if(connected) {
          initialize();
        } else {
          logger.error('  MONGODB_ERROR: ' + err.message);
          process.exit(1);
        }
      });
    }

    function initialize() {
      logger.info('\n  injecting laika...');
      injector.inject();
      App.touch(deps.tick.bind(deps), {mongoPort: argv.mport});

      logger.info('  loading phantomjs...');
      Phantom.create(afterPhantomCreated, {parameters: {
        'load-images': false
      }});

      //make sure this get ended everytime
      process.once('exit', function() {
        atTheEnd(1);
      });
    }

    function afterPhantomCreated(err, ph) {
      if(err) {
        logger.error('  please install phantomjs to countinue');
        throw err;
      } else {
        phantom = ph;
        phantom._phantom.stdout.on('data', onPhantomLogs);
        phantom._phantom.stderr.on('data', onPhantomLogs);
        deps.tick();
      }
    }

    deps.ready(function() {
      logger.info('  loading initial app pool...');
      appPool = new AppPool({
          size: 2,
          appDir: './',
          mongoPort: argv.mport,
          settingsFile: (argv.settings)? path.resolve(argv.settings) : null
      });
      appPool.on('ready', onAppPoolReady);

      if(argv.ui == 'tdd') {
        test = testLogic(appPool, phantom);
        ltest = ltestWithWarning(test);
      } else if(argv.ui == 'bdd') {
        it = testLogic(appPool, phantom);
      }
    });

    function onAppPoolReady() {
      // require('mocha/bin/_mocha');
      var mochaOptions= {
          reporter: argv.reporter,
          ui: argv.ui,
          timeout: argv.timeout,
          grep: argv.grep,
          invert: argv.invert,
          slow: argv.slow,
          debug: argv.debug,
          debugBrk: argv.debugBrk
      };

      //requring compiler modules
      if(compilers) {
        compilers.modules.forEach(function(module) {
          logger.laika('adding compiler module: ' + module);
          require(module);
        });
      }

      var mocha = new Mocha(mochaOptions);
      var args = argv.args;
      if (!args.length) {
        args.push('./tests')
      }
      args.forEach(function (arg) {
        identifyTests(arg, mocha);
      })
      var runner = mocha.run(function(failedCount) {
        var exitCode = (failedCount > 0)? 1: 0;
        atTheEnd(exitCode);
      });
    }

    function identifyTests(path, mocha) {
      var stat = fs.statSync(path);
      if(stat.isDirectory()) {
        scanFiles(path, mocha, {});
      } else {
        if (fs.existsSync(path)) {
          mocha.addFile(path)
        } else {
          if (fs.existsSync(path + '.js')) {
            path += '.js'
            mocha.addFile(path)
          } else {
            glob.sync(path).forEach(function (file) {
              mocha.addFile(file)
            })
          }
        }
      }
    }

    function scanFiles(dir, mocha, options) {
      options = options || {};
      var files = fs.readdirSync(dir);

      files.forEach(function(file) {
        var filename = path.resolve(dir, file);
        var stat = fs.statSync(filename);
        if(stat.isDirectory()) {
          return scanFiles(filename, mocha, options);
        }
        if (!stat.isFile() || !isSourceFileAllowed(filename) || path.basename(filename)[0] == '.') {
          return;
        }
        logger.laika('adding test file: ' + filename);
        mocha.addFile(filename);
      });
    }

    function atTheEnd(exitCode) {
      if(!ended) {
        logger.info('  cleaning up injected code\n');
        injector.clean();

        phantom._phantom.stdout.removeListener('data', onPhantomLogs);
        phantom._phantom.stderr.removeListener('data', onPhantomLogs);
        phantom.exit();

        appPool.close(function() {
          process.exit(exitCode);
        });
        ended = true;
      }
    }
  },

  version: function() {
    var packageJson = require('../package.json');
    console.log(packageJson.version);
  },

  actions: require('../lib/actions')
};

function onPhantomLogs(data) {
  logger.phantom(data.toString());
}

function ltestWithWarning(test) {
  var warned = false;
  return function() {
    if(!warned) {
      warned = true;
      logger.log('\n  WARNING: '.red.bold + 'ltest'.white.bold + ' is deprecated, use '.red.bold + 'test'.white.bold + ' instead'.red.bold);
    }
    test.apply(this, arguments);
  };
}

function dropLaikaDbs(callback) {
  //apply drop command with probability of 1/10
  // var dropThisTime = Math.ceil(Math.random() * 10) == 5;
  if(true) {
    var scriptsFolder = path.resolve(__dirname, '../scripts');
    exec('mongo drop-laika-dbs.js', {cwd: scriptsFolder}, callback);
  } else {
    callback();
  }
}

function parseCompilers(compilers) {
  if(!compilers) return null;

  var map = {};
  var extensions = [];
  var modules = [];

  compilers.split(',').forEach(function(c) {
      var compiler = c.split(':');
      var extension = compiler[0];
      var module = compiler[1];
      map[extension] = module;
      extensions.push(extension);
      modules.push(module);
  });

  return {
    map: map,
    extensions: extensions,
    modules: modules
  };
}

function generateIsSourceFileAllowed(compilers) {
  var fileExtensions = ['js'];
  if(compilers) {
    fileExtensions = fileExtensions.concat(compilers.extensions);
  }
  var fileExtensionsList = '(' + fileExtensions.join('|') + ')';
  logger.laika('accepting the following extensions: ' + fileExtensionsList);
  var allowOnlyProperSourceFiles = new RegExp('\\.'+fileExtensionsList+'$');

  return function(filename) {
    return allowOnlyProperSourceFiles.test(filename);
  }
}

process.on('SIGINT', function() {
  injector.clean();
  process.exit();
});
